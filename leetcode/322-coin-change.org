You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:
#+begin_example
Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1
#+end_example

Example 2:
#+begin_example
Input: coins = [2], amount = 3
Output: -1
#+end_example

Note:
You may assume that you have an infinite number of each kind of coin.

* 普通递归
#+begin_src java :classname CoinChange :cmdline "-cp ." :exports both :results output
  class CoinChange {
      public static void main(String[] args) {
          long startTime = System.currentTimeMillis();
          System.out.println("coins = [1, 2, 5], amount = 11, result = " + solution(new int[] {1, 2, 5}, 35));
          System.out.println("coins = [2], amount = 3, result = " + solution(new int[] {2}, 3));
          long endTime = System.currentTimeMillis();
          System.out.println((endTime - startTime) + "ms");
      }

      public static int solution(int[] coins, int amount) {

          if (amount == 0) return 0;
          if (amount < 0) return -1;

          int result = Integer.MAX_VALUE;
          for (int coin : coins) {
              int sub = solution(coins, amount - coin);
              if (sub == -1) continue;
              result = Math.min(result, sub + 1);
          }

          if (result == Integer.MAX_VALUE) {
              return -1;
          } else {
              return result;
          }
      }

  }
#+end_src

#+RESULTS:
: coins = [1, 2, 5], amount = 11, result = 7
: coins = [2], amount = 3, result = -1
: 914ms

* 带备忘录递归
#+begin_src java :classname CoinChangeRecursionWithMemo :cmdline "-cp ." :exports both :results output
  import java.util.Map;
  import java.util.HashMap;

  class CoinChangeRecursionWithMemo {
      public static void main(String[] args) {
          long startTime = System.currentTimeMillis();
          mem.clear();
          System.out.println("coins = [1, 2, 5], amount = 11, result = " + solution(new int[] {1, 2, 5}, 35));
          mem.clear();
          System.out.println("coins = [2], amount = 3, result = " + solution(new int[] {2}, 3));
          long endTime = System.currentTimeMillis();
          System.out.println((endTime - startTime) + "ms");

      }

      static Map<Integer, Integer> mem = new HashMap<>();
      public static int solution(int[] coins, int amount) {

          if (amount == 0) return 0;
          if (amount < 0) return -1;
          if (mem.containsKey(amount)) return mem.get(amount);

          int result = Integer.MAX_VALUE;
          for (int coin : coins) {
              int sub = solution(coins, amount - coin);
              if (sub == -1) continue;
              result = Math.min(result, sub + 1);
          }

          if (result == Integer.MAX_VALUE) {
              mem.put(amount, -1);
              return -1;
          } else {
              mem.put(amount, result);
              return result;
          }
      }

  }
#+end_src

#+RESULTS:
: coins = [1, 2, 5], amount = 11, result = 7
: coins = [2], amount = 3, result = -1
: 1ms

* 动态规划
#+begin_src java :classname CoinChangeDp :cmdline "-cp ." :exports both :results output
  import java.util.Arrays;
  import java.util.Map;
  import java.util.HashMap;

  class CoinChangeDp {
      public static void main(String[] args) {
          long startTime = System.currentTimeMillis();
          System.out.println("coins = [1, 2, 5], amount = 11, result = " + solution(new int[] {1, 2, 5}, 35));
          System.out.println("coins = [2], amount = 3, result = " + solution(new int[] {2}, 3));
          long endTime = System.currentTimeMillis();
          System.out.println((endTime - startTime) + "ms");

      }

      public static int solution(int[] coins, int amount) {

          int[] table = new int[amount + 1];
          Arrays.fill(table, Integer.MAX_VALUE);

          table[0] = 0;

          for (int i = 1; i <= amount; i++) {
              for (int coin : coins) {
                  if ((i - coin) < 0) continue;
                  int sub = table[i - coin];
                  if (sub == Integer.MAX_VALUE) continue;
                  table[i] = Math.min(table[i], sub + 1);
              }
          }

          if (table[amount] == Integer.MAX_VALUE) {
              return -1;
          } else {
              return table[amount];
          }
      }

  }
#+end_src

#+RESULTS:
: coins = [1, 2, 5], amount = 11, result = 7
: coins = [2], amount = 3, result = -1
: 0ms
