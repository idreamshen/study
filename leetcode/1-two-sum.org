Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

#+begin_src java :classname TwoSum :cmdline "-cp ." :exports both
  import java.util.HashMap;
  import java.util.Map;

  public class TwoSum {
      public static void main(String[] args) {
          m1(new int[]{2, 7, 11, 15}, 9);
          m2(new int[]{2, 7, 11, 15}, 9);
          m1(new int[]{9, 1, 2, 7}, 9);
          m2(new int[]{9, 1, 2, 7}, 9);
          m1(new int[]{9, 1, 2, 7}, 16);
          m2(new int[]{9, 1, 2, 7}, 16);
      }

      public static void m1(int[] nums, int sum) {
          int i1 = -1;
          int i2 = -1;

          main:
          for (int i = 0; i < nums.length; i++) {
              i1 = -1;
              i2 = -1;
              int left = nums[i];
              if (left > sum) {
                  continue;
              }

              int targetRight = sum - left;

              if (i == nums.length - 1) {
                  break;
              }

              for (int j = i + 1; j < nums.length; j++) {
                  int right = nums[j];
                  if (right == targetRight) {
                      i1 = i;
                      i2 = j;
                      break main;
                  }
              }
          }

          if (i1 != -1 && i2 != -1) {
              System.out.println(i1 + "," + i2);
          } else {
              System.out.println("not found");
          }
      }

      public static void m2(int[] nums, int sum) {
          int i1 = -1;
          int i2 = -1;

          Map<Integer, Integer> m = new HashMap<>();

          for (int i = 0; i < nums.length; i++) {
              int num = nums[i];
              int remain = sum - num;

              if (m.containsKey(remain)) {
                  i1 = i;
                  i2 = m.get(remain);
                  break;
              } else {
                  m.put(num, i);
              }
          }

          if (i1 != -1 && i2 != -1) {
              System.out.println(i1 + "," + i2);
          } else {
              System.out.println("not found");
          }

      }
  }
#+end_src

#+RESULTS:
| 0 | 1 |
| 1 | 0 |
| 2 | 3 |
| 3 | 2 |
| 0 | 3 |
| 3 | 0 |
