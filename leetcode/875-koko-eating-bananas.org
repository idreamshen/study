Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has piles[i] bananas.  The guards have gone and will come back in H hours.

Koko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses some pile of bananas, and eats K bananas from that pile.  If the pile has less than K bananas, she eats all of them instead, and won't eat any more bananas during this hour.

Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.

Return the minimum integer K such that she can eat all the bananas within H hours.

Example 1:
#+begin_example
Input: piles = [3,6,7,11], H = 8
Output: 4
#+end_example

Example 2:
#+begin_example
Input: piles = [30,11,23,4,20], H = 5
Output: 30
#+end_example

Example 3:
#+begin_example
Input: piles = [30,11,23,4,20], H = 6
Output: 23
#+end_example
 
Constraints:

1 <= piles.length <= 10^4
piles.length <= H <= 10^9
1 <= piles[i] <= 10^9

#+begin_src java :classname KokoEatingBananas :cmdline "-cp ." :exports both :results output
  class KokoEatingBananas {
      public static void main(String[] args) {
          System.out.println("Input: piles = [3, 6, 7, 11], H = 8. Output: " + solution(new int[] {3, 6, 7, 11}, 8));
          System.out.println("Input: piles = [30, 11, 23, 4, 20], H = 5. Output: " + solution(new int[] {30, 11, 23, 4, 20}, 5));
      }

      public static int solution(int[] piles, int h) {
          int maxSpeed = getMaxPile(piles);

          for (int speed = 1; speed < maxSpeed; speed++) {
              if (canFinish(piles, speed, h)) {
                  return speed;
              }
          }

          return maxSpeed;
      }

      static int getMaxPile(int[] piles) {
          int max = 0;
          for (int pile : piles) {
              if (pile > max) {
                  max = pile;
              }
          }

          return max;
      }

      /**
       ,* 能否在指定时间 h 小时内以速度 speed 吃完香蕉
       ,* @param speed 速度
       ,* @param h 小时
       ,*/
      static boolean canFinish(int[] piles, int speed, int h) {
          int needHours = 0;
          for (int pile : piles) {
              needHours = needHours + timeOf(pile, speed);
          }

          return needHours <= h;
      }

      static int timeOf(int pile, int speed) {
          return (pile / speed) + (pile % speed > 0 ? 1 : 0);
      }
  }
#+end_src

#+RESULTS:
: Input: piles = [3, 6, 7, 11], H = 8. Output: 4
: Input: piles = [30, 11, 23, 4, 20], H = 5. Output: 30

* 参考资料
- [[https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/koko-tou-xiang-jiao][如何运用二分查找算法]]

