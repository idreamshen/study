You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

#+begin_src java :classname AddTwoNumbers :cmdline "-cp ." :results scalar :exports both
    public class AddTwoNumbers {
        static class Node {
            int value;
            Node next;
        }

        public static void main(String[] args) {
            Node node1 = build(new int[] {2, 4, 3});
            Node node2 = build(new int[] {5, 6, 9, 6});

            print(node1);
            print(node2);

            Node resultNode = sum(node1, node2);
            print(resultNode);
        }

        public static Node sum(Node left, Node right) {
            Node head = null;
            Node lastNode = null;

            boolean isLeftEnd = false;
            boolean isRightEnd = false;

            Node tmpLeft = left;
            Node tmpRight = right;
            int incr = 0;

            int i = 0;

            while (true) {
                i++;
                if (tmpLeft == null) {
                    isLeftEnd = true;
                }

                if (tmpRight == null) {
                    isRightEnd = true;
                }

                if ((isLeftEnd && isRightEnd && incr == 0) || i > 1000) {
                    break;
                }

                int tmpLeftValue = 0;
                int tmpRightValue = 0;

                if (tmpLeft != null) {
                    tmpLeftValue = tmpLeft.value;
                }

                if (tmpRight != null) {
                    tmpRightValue = tmpRight.value;
                }

                int tmpCmbValue = incr + tmpLeftValue + tmpRightValue;
                int tmpValue = tmpCmbValue % 10; // 末尾
                incr = tmpCmbValue / 10; // 下一位进多少

                Node tmp = new Node();
                tmp.value = tmpValue;

                if (lastNode == null) {
                    lastNode = tmp;
                    head = tmp;
                } else {
                    lastNode.next = tmp;
                    lastNode = tmp;
                }

                if (tmpLeft != null) {
                    tmpLeft = tmpLeft.next;
                }

                if (tmpRight != null) {
                    tmpRight = tmpRight.next;
                }
            }

            return head;
        }

        public static Node build(int[] nums) {
            Node head = null;
            Node lastNode = null;
            for (int num : nums) {
                Node node = new Node();
                node.value = num;

                if (head == null) {
                    lastNode = node;
                    head = node;
                } else {
                    lastNode.next = node;
                    lastNode = node;
                }
            }

            return head;
        }

        public static void print(Node node) {
            String result = "";
            Node tmp = node;

            int i = 0;

            while(tmp != null && i < 100) {
                result = result + tmp.value;
                tmp = tmp.next;
                i++;
            }

            System.out.println(result);
        }
    }
#+end_src

#+RESULTS:
: 243
: 5696
: 7037
