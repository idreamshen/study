Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:
#+begin_example
Input: [2,2,1]
Output: 1
#+end_example
Example 2:
#+begin_example
Input: [4,1,2,1,2]
Output: 4
#+end_example

#+begin_src java :classname SingleNumber :cmdline "-cp ." :exports both :results output
  class SingleNumber {
      public static void main(String[] args) {
          System.out.println("input = [2, 2, 1], output = " + solution(new int[]{2, 2, 1}));
          System.out.println("input = [4, 1, 2, 1, 2], output = " + solution(new int[]{4, 1, 2, 1, 2}));
      }

      static int solution(int[] nums) {
          int res = 0;

          for (int num : nums) {
              res = res ^ num;
          }

          return res;
      }
  }
#+end_src

#+RESULTS:
: input = [2, 2, 1], output = 1
: input = [4, 1, 2, 1, 2], output = 4
