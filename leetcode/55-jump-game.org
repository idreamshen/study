Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:
#+begin_example
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
#+end_example

Example 2:
#+begin_example
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
#+end_example

#+begin_src java :classname JumpGame :cmdline "-cp ." :exports both :results scalar
  class JumpGame {
      public static void main(String[] args) {
          System.out.println("2, 3, 1, 1, 4, " + solution(new int[] {2, 3, 1, 1, 4}));
          System.out.println("3, 2, 1, 0, 4, " + solution(new int[] {3, 2, 1, 0, 4}));
      }

      static boolean solution(int[] nums) {
          int n = nums.length;
          int farthest = 0;

          for (int i = 0; i < n - 1; i++) {
              farthest = Math.max(farthest, nums[i] + i);

              if (farthest <= i) return false;
          }

          return farthest >= n - 1;
      }
  }
#+end_src

#+RESULTS:
: 2, 3, 1, 1, 4, true
: 3, 2, 1, 0, 4, false
