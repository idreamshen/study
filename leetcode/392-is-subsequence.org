Given a string s and a string t, check if s is subsequence of t.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

Example 1:
#+begin_example
Input: s = "abc", t = "ahbgdc"
Output: true
#+end_example

Example 2:
#+begin_example
Input: s = "axc", t = "ahbgdc"
Output: false
#+end_example

Constraints:

- 0 <= s.length <= 100
- 0 <= t.length <= 10^4
- Both strings consists only of lowercase characters.

#+begin_src java :classname IsSubsequence :cmdline "-cp ." :exports both :results output
  class IsSubsequence {

      public static void main(String[] args) {
          System.out.println("Input: s = abc, t = ahbgdc. Output: " + solution("abc", "ahbgdc"));
          System.out.println("Input: s = axc, t = ahbgdc. Output: " + solution("axc", "ahbgdc"));
      }

      static boolean solution(String s, String t) {
          int i = 0;
          int j = 0;

          char[] sChars = s.toCharArray();
          char[] tChars = t.toCharArray();

          while (i < s.length() && j < t.length()) {
              if (sChars[i] == tChars[j]) {
                  i++;
              }
              j++;
          }

          return i == s.length();
      }
  }
#+end_src

#+RESULTS:
: Input: s = abc, t = ahbgdc. Output: true
: Input: s = axc, t = ahbgdc. Output: false
