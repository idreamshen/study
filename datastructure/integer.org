#+TITLE: Java Integer

* 实测 Integer 比较
#+begin_src java :classname IntegerDemo :cmdline "-cp ." :results output :exports both
  class IntegerDemo {
      public static void main(String[] args) {
          Integer a = 1;
          Integer b = 1;
          Integer c = Integer.valueOf(1);
          System.out.println("a == b: " + (a == b)); // true
          System.out.println("a.equals(b): " + a.equals(b)); // true
          System.out.println("a == c: " + (a == c)); // true

          Integer d = new Integer(1);
          System.out.println("a == d: " + (a == d)); // false
          Integer e = new Integer(1);
          System.out.println("d == e: " + (d == e)); // false
      }
  }
#+end_src

#+RESULTS:
: a == b: true
: a.equals(b): true
: a == c: true
: a == d: false
: d == e: false

* 使用 javap 获取字节码分析
#+begin_src sh :results output :exports both
javap -l -c IntegerDemo.class
#+end_src

#+RESULTS:
#+begin_example
Compiled from "IntegerDemo.java"
class IntegerDemo {
  IntegerDemo();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return
    LineNumberTable:
      line 1: 0

  public static void main(java.lang.String[]);
    Code:
       0: iconst_1
       1: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       4: astore_1
       5: iconst_1
       6: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: astore_2
      10: iconst_1
      11: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: astore_3
      15: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;
      18: new           #4                  // class java/lang/StringBuilder
      21: dup
      22: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #6                  // String a == b:
      27: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: aload_2
      32: if_acmpne     39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      43: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      49: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;
      52: new           #4                  // class java/lang/StringBuilder
      55: dup
      56: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #11                 // String a.equals(b):
      61: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload_1
      65: aload_2
      66: invokevirtual #12                 // Method java/lang/Integer.equals:(Ljava/lang/Object;)Z
      69: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      72: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      78: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;
      81: new           #4                  // class java/lang/StringBuilder
      84: dup
      85: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
      88: ldc           #13                 // String a == c:
      90: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: aload_1
      94: aload_3
      95: if_acmpne     102
      98: iconst_1
      99: goto          103
     102: iconst_0
     103: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
     106: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     109: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     112: new           #14                 // class java/lang/Integer
     115: dup
     116: iconst_1
     117: invokespecial #15                 // Method java/lang/Integer."<init>":(I)V
     120: astore        4
     122: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;
     125: new           #4                  // class java/lang/StringBuilder
     128: dup
     129: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
     132: ldc           #16                 // String a == d:
     134: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: aload_1
     138: aload         4
     140: if_acmpne     147
     143: iconst_1
     144: goto          148
     147: iconst_0
     148: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
     151: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     154: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     157: new           #14                 // class java/lang/Integer
     160: dup
     161: iconst_1
     162: invokespecial #15                 // Method java/lang/Integer."<init>":(I)V
     165: astore        5
     167: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;
     170: new           #4                  // class java/lang/StringBuilder
     173: dup
     174: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
     177: ldc           #17                 // String d == e:
     179: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     182: aload         4
     184: aload         5
     186: if_acmpne     193
     189: iconst_1
     190: goto          194
     193: iconst_0
     194: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
     197: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     200: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     203: return
    LineNumberTable:
      line 3: 0
      line 4: 5
      line 5: 10
      line 6: 15
      line 7: 49
      line 8: 78
      line 10: 112
      line 11: 122
      line 12: 157
      line 13: 167
      line 14: 203
}
#+end_example

我们先分析变量 a b c
#+begin_src example
int a = 1; // line 3
int b = 1; // line 4
int c = Integer.valueOf(1); // line 5
#+end_src

相应字节码
#+begin_src example
// 代码行号映射如下
// line 3: 0-4
// line 4: 5-9
// line 5: 10-14

0: iconst_1
1: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
4: astore_1
5: iconst_1
6: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
9: astore_2
10: iconst_1
11: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
14: astore_3
#+end_src
上述显示字节码最终均调用了 =Integer.valueOf= 这个方法。根据 =Integer.valueOf= 源码可知，在 -128 ~ 127 范围内， =Integer.valueOf= 方法返回的均是缓存对象，
故使用 ~==~ 进行引用判断时， =a==b= =a==c= 均为 true。


* 参考资料
- [[https://www.jianshu.com/p/6a8997560b05][通过javap命令分析java汇编指令]]
