#+TITLE: Java Integer

* 实测 Integer 比较
#+begin_src java :classname IntegerDemo :cmdline "-cp ." :results output :exports both
  class IntegerDemo {
      public static void main(String[] args) {
          Integer a = 1;
          Integer b = 1;
          Integer c = Integer.valueOf(1);
          System.out.println("a == b: " + (a == b)); // true
          System.out.println("a.equals(b): " + a.equals(b)); // true
          System.out.println("a == c: " + (a == c)); // true

          Integer d = new Integer(1);
          System.out.println("a == d: " + (a == d)); // false
          Integer e = new Integer(1);
          System.out.println("d == e: " + (d == e)); // false
      }
  }
#+end_src

#+RESULTS:
: a == b: true
: a.equals(b): true
: a == c: true
: a == d: false
: d == e: false

* 使用 javap 获取字节码分析
我们将上述代码简化，只分析变量的定义
#+begin_src java :classname IntegerDef :cmdline "-cp ."
  class IntegerDef {
      public static void main(String[] args) {
          Integer a = 1;
          Integer b = 1;
          Integer c = Integer.valueOf(1);
          Integer d = new Integer(1);
      }
  }
#+end_src

#+RESULTS:

#+begin_src sh :results output :exports results
javap -l -c IntegerDef.class
#+end_src

#+RESULTS:
#+begin_example
Compiled from "IntegerDef.java"
class IntegerDef {
  IntegerDef();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return
    LineNumberTable:
      line 1: 0

  public static void main(java.lang.String[]);
    Code:
       0: iconst_1
       1: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       4: astore_1
       5: iconst_1
       6: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: astore_2
      10: iconst_1
      11: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: astore_3
      15: new           #3                  // class java/lang/Integer
      18: dup
      19: iconst_1
      20: invokespecial #4                  // Method java/lang/Integer."<init>":(I)V
      23: astore        4
      25: return
    LineNumberTable:
      line 3: 0
      line 4: 5
      line 5: 10
      line 6: 15
      line 7: 25
}
#+end_example

我们先分析变量 a b c
#+begin_src example
int a = 1; // line 3
int b = 1; // line 4
int c = Integer.valueOf(1); // line 5
#+end_src

相应字节码
#+begin_src example
// 代码行号映射如下
// line 3: 0-4
// line 4: 5-9
// line 5: 10-14

0: iconst_1
1: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
4: astore_1
5: iconst_1
6: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
9: astore_2
10: iconst_1
11: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
14: astore_3
#+end_src

上述显示字节码最终均调用了 =Integer.valueOf= 这个方法。根据 =Integer.valueOf= 源码可知，在 -128 ~ 127 范围内， =Integer.valueOf= 方法返回的均是缓存对象，
故使用 ~==~ 进行引用判断时， =a==b= =a==c= 均为 true。

Integer.java 源码如下
#+begin_src java
  class Integer {

      public static Integer valueOf(int i) {
          if (i >= IntegerCache.low && i <= IntegerCache.high)
              return IntegerCache.cache[i + (-IntegerCache.low)];
          return new Integer(i);
      }

      /**
       ,* 缓存
       ,*/
      private static class IntegerCache {
          static final int low = -128;
          static final int high;
          static final Integer cache[];

          static {
              // high value may be configured by property
              int h = 127;
              String integerCacheHighPropValue =
                  sun.misc.VM.getSavedProperty("java.lang.Integer.IntegerCache.high");
              if (integerCacheHighPropValue != null) {
                  try {
                      int i = parseInt(integerCacheHighPropValue);
                      i = Math.max(i, 127);
                      // Maximum array size is Integer.MAX_VALUE
                      h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
                  } catch( NumberFormatException nfe) {
                      // If the property cannot be parsed into an int, ignore it.
                  }
              }
              high = h;

              // 类加载期间完成缓存构造
              cache = new Integer[(high - low) + 1];
              int j = low;
              for(int k = 0; k < cache.length; k++)
                  cache[k] = new Integer(j++);

              // range [-128, 127] must be interned (JLS7 5.1.7)
              assert IntegerCache.high >= 127;
          }

          private IntegerCache() {}
      }

  }
#+end_src


* 参考资料
- [[https://www.jianshu.com/p/6a8997560b05][通过javap命令分析java汇编指令]]
- [[https://github.com/openjdk/jdk/blob/9a9add8825a040565051a09010b29b099c2e7d49/jdk/src/share/classes/java/lang/Integer.java][Integer.java]]
