#+TITLE: A Tour of Go

* Packages
  #+begin_src go :exports both
    package main

    import (
        "fmt"
        "math/rand"
    )

    func main() {
        fmt.Println("My favorite number is", rand.Intn(10))
    }
  #+end_src

#+RESULTS:
: My favorite number is 1

* Imports
  #+begin_src go :exports both
    package main

    import (
        "fmt"
        "math"
    )

    func main() {
        fmt.Printf("Now you have %g problems.\n", math.Sqrt(7))
    }
  #+end_src

  #+RESULTS:
  : Now you have 2.6457513110645907 problems.

* Exported names
  #+begin_src go :exports both
    package main

    import (
        "fmt"
        "math"
    )

    func main() {
        fmt.Println(math.Pi)
    }
  #+end_src

  #+RESULTS:
  : 3.141592653589793

* Functions
  #+begin_src go :exports both
    package main

    import "fmt"

    func add(x int, y int) int {
        return x + y
    }

    func main() {
        fmt.Println(add(42, 13))
    }
  #+end_src

  #+RESULTS:
  : 55

* Functions continued
  #+begin_src go :exports both
    package main

    import "fmt"

    func add(x, y int) int {
        return x + y
    }

    func main() {
        fmt.Println(add(42, 13))
    }
  #+end_src

  #+RESULTS:
  : 55

* Multiple results
  #+begin_src go :exports both
    package main

    import "fmt"

    func swap(x, y string) (string, string) {
        return y, x
    }

    func main() {
        a, b := swap("hello", "world")
        fmt.Println(a, b)
    }
  #+end_src

  #+RESULTS:
  : world hello

* Named return values
  #+begin_src go :exports both
    package main

    import "fmt"

    func split(sum int) (x, y int) {
        x = sum * 4 /9
        y = sum - x
        return
    }

    func main() {
        fmt.Println(split(17))
    }
  #+end_src

  #+RESULTS:
  : 7 10

* Variable
  #+begin_src go :exports both
    package main

    import "fmt"

    var c, python, java bool

    func main() {
        var i int
        fmt.Println(i, c, python, java)
    }
  #+end_src

  #+RESULTS:
  : 0 false false false

* Variables with initializers
  #+begin_src go :exports both
    package main

    import "fmt"

    var i, j int = 1, 2

    func main() {
        var c, python, java = true, false, "no!"
        fmt.Println(i, j, c, python, java)
    }
  #+end_src

  #+RESULTS:
  : 1 2 true false no!

* Short variable declarations
  #+begin_src go :exports both
    package main

    import "fmt"

    func main() {
        var i, j int = 1, 2
        k := 3
        c, python, java := true, false, "no!"

        fmt.Println(i, j, k, c, python, java)
    }
  #+end_src

  #+RESULTS:
  : 1 2 3 true false no!

* Basic types
  #+begin_src go :exports both
    package main

    import (
        "fmt"
        "math/cmplx"
    )

    var (
        ToBe bool = false
        MaxInt uint64 = 1<<64 - 1
        z complex128 = cmplx.Sqrt(-5 + 12i)
    )

    func main() {
        fmt.Printf("Type: %T Value: %v\n", ToBe, ToBe)
        fmt.Printf("Type: %T Value: %v\n", MaxInt, MaxInt)
        fmt.Printf("Type: %T Value: %v\n", z, z)
    }
  #+end_src

  #+RESULTS:
  : Type: bool Value: false
  : Type: uint64 Value: 18446744073709551615
  : Type: complex128 Value: (2+3i)

* Zero values
  #+begin_src go :exports both
    package main

    import "fmt"

    func main() {
        var i int
        var f float64
        var b bool
        var s string
        fmt.Printf("%v %v %v %q\n", i, f, b, s)
    }
  #+end_src

  #+RESULTS:
  : 0 0 false ""

* Type conversions
  #+begin_src go :exports both
    package main

    import (
        "fmt"
        "math"
    )

    func main() {
        var x, y int = 3, 4
        var f float64 = math.Sqrt(float64(x*x + y*y))
        var z uint = uint(f)
        fmt.Println(x, y, z)
    }
  #+end_src

  #+RESULTS:
  : 3 4 5

* Type inference
  #+begin_src go :exports both
    package main

    import "fmt"

    func main() {
        v := 42
        fmt.Printf("v is of type %T\n", v)
    }
  #+end_src

  #+RESULTS:
  : v is of type int

* Constants
  #+begin_src go :exports both
    package main

    import "fmt"

    const Pi = 3.14

    func main() {
        const World = "World"
        fmt.Println("Hello", World)
        fmt.Println("Happy", Pi, "Day")

        const Truth = true
        fmt.Println("Go rules?", Truth)
    }
  #+end_src

  #+RESULTS:
  : Hello World
  : Happy 3.14 Day
  : Go rules? true

* Numeric Constants
  #+begin_src go :exports both
    package main

    import "fmt"

    const (
        Big = 1 << 100
        Small = Big >> 99
    )

    // needInt ...
    func needInt(x int) int {
        return x*10 + 1
    }

    // needFloat ...
    func needFloat(x float64) float64 {
        return x * 0.1
    }

    func main() {
        fmt.Println(needInt(Small))
        fmt.Println(needFloat(Small))
        fmt.Println(needFloat(Big))
    }
  #+end_src

  #+RESULTS:
  : 21
  : 0.2
  : 1.2676506002282295e+29

* For
  #+begin_src go :exports both
    package main

    import "fmt"

    func main() {
        sum := 0
        for i := 0; i < 10; i++ {
            sum += i
        }
        fmt.Println(sum)
    }
  #+end_src

  #+RESULTS:
  : 45

* For continued
  #+begin_src go :exports both
    package main

    import "fmt"

    func main() {
        sum := 1
        for ; sum < 1000; {
            sum += sum
        }
        fmt.Println(sum)
    }
  #+end_src

  #+RESULTS:
  : 1024

* For is Go's "while"
  #+begin_src go :exports both
    package main

    import "fmt"

    func main() {
        sum := 1
        for sum < 1000 {
            sum += sum
        }
        fmt.Println(sum)
    }
  #+end_src

  #+RESULTS:
  : 1024

* If
  #+begin_src go :exports both
    package main

    import (
        "fmt"
        "math"
    )

    // sqrt ...
    func sqrt(x float64) string {
        if x < 0 {
            return sqrt(-x) + "i"
        }

        return fmt.Sprint(math.Sqrt(x))
    }

    func main() {
        fmt.Println(sqrt(2), sqrt(-4))
    }
  #+end_src

  #+RESULTS:
  : 1.4142135623730951 2i

* If with a short statement
  #+begin_src go :exports both
    package main

    import (
        "fmt"
        "math"
    )

    func pow(x, n, lim float64) float64 {
        if v := math.Pow(x, n); v < lim {
            return v
        }

        return lim
    }

    func main() {
        fmt.Println(
            pow(3, 2, 10),
            pow(3, 3, 20),
        )
    }
  #+end_src

  #+RESULTS:
  : 9 20
