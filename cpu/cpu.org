#+TITLE: Linux性能优化实战
#+SUBTITLE: CPU篇（上）
#+AUTHOR: 张栋
#+DATE: <2019-06-20 Thu>

#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_COMPILER: xelatex
#+BEAMER_THEME: [block=fill,progressbar=head,numbering=fraction]metropolis
#+BEAMER_HEADER: \usepackage{fontspec}
#+BEAMER_HEADER: \setmainfont{SourceCodePro-Regular}
#+BEAMER_HEADER: \usepackage[slantfont,boldfont]{xeCJK}
#+BEAMER_HEADER: \setCJKmainfont{STSongti-SC-Regular}
#+OPTIONS: H:2 toc:t TeX:t LaTeX:t
#+latex_header: \usepackage{setspace}
#+latex_header: \onehalfspacing
#+LATEX_HEADER: \usepackage{listings}
#+LaTeX_HEADER: \lstset{basicstyle=\tiny\ttfamily,xleftmargin=3pt}
#+latex_class_options: [8pt]
# #+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js

* 平均负载
** 平均负载概念
*** uptime
#+BEGIN_SRC sh
uptime

12:36:22 up 12:12,  1 users,  load average: 1.73, 3.60, 7.98
#+END_SRC
*** 平均负载
简单理解：单位时间内，系统处于可运行状态和不可中断状态的平均进程数，也就是平均活跃进程数
** 平均负载概念
*** 平均负载
指单位时间内，系统处于可运行状态和不可中断状态的平均进程数，也就是平均活跃进程数

*** 可运行状态
正在使用CPU或者正在等待CPU的进程。即ps命令中看到的，处于R状态（Running或Runnable）的进程。

*** 不可中断状态
正处于内核关键流程中的进程，并且这些流程是不可打断的。比如常见的等待硬件设备的I/O响应，也就是ps命令中看到的D状态（Uniterruptible Sleep，也称为Disk Sleep）的进程
** 平均负载案例
- CPU 密集型进程
- I/O 密集型进程
- 大量进程
** 平均负载案例——CPU 密集型进程——真实环境                          :noexport:
#+BEGIN_SRC sh :results scalar
docker stop geekbang
docker rm geekbang
docker run --privileged --rm -d --name geekbang geekbang stress --cpu 1 --timeout 600
#+END_SRC

#+RESULTS:
: geekbang
: 7fa3e1dea6d7421545976141ab43a0b471144c258b664619d4692677af104fa7

#+BEGIN_SRC sh :results scalar
docker exec geekbang uptime
#+END_SRC

#+RESULTS:
:  06:04:42 up 1 day, 14:45,  0 users,  load average: 1.03, 0.89, 0.49

#+BEGIN_SRC sh :results scalar
docker exec geekbang mpstat -P ALL 5 1
#+END_SRC

#+RESULTS:
#+begin_example
Linux 4.9.125-linuxkit (dd9e2a30ebff) 	06/18/19 	_x86_64_	(2 CPU)

23:33:52     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
23:33:57     all   50.10    0.00    0.40    0.00    0.00    0.00    0.00    0.00    0.00   49.50
23:33:57       0    0.20    0.00    0.60    0.00    0.00    0.00    0.00    0.00    0.00   99.20
23:33:57       1   99.80    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00

Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
Average:     all   50.10    0.00    0.40    0.00    0.00    0.00    0.00    0.00    0.00   49.50
Average:       0    0.20    0.00    0.60    0.00    0.00    0.00    0.00    0.00    0.00   99.20
Average:       1   99.80    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00
#+end_example

#+BEGIN_SRC sh :results scalar
docker exec geekbang pidstat -u 5 1
#+END_SRC

#+RESULTS:
: Linux 4.9.125-linuxkit (dd9e2a30ebff) 	06/18/19 	_x86_64_	(2 CPU)
: 
: 23:35:21      UID       PID    %usr %system  %guest    %CPU   CPU  Command
: 23:35:26        0         6   99.40    0.00    0.00   99.40     0  stress
: 
: Average:      UID       PID    %usr %system  %guest    %CPU   CPU  Command
: Average:        0         6   99.40    0.00    0.00   99.40     -  stress

** 平均负载案例——CPU 密集型进程
*** env
#+BEGIN_SRC sh
$ stress --cpu 1 --timeout 600
$ uptime

23:33:41 up 23:41,  0 users,  load average: 1.17, 0.72, 0.55
#+END_SRC

*** mpstat
#+BEGIN_SRC sh
$ mpstat -P ALL 5 1

Linux 4.9.125-linuxkit (dd9e2a30ebff) 	06/18/19 	_x86_64_	(2 CPU)

23:33:52     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
23:33:57     all   50.10    0.00    0.40    0.00    0.00    0.00    0.00    0.00    0.00   49.50
23:33:57       0    0.20    0.00    0.60    0.00    0.00    0.00    0.00    0.00    0.00   99.20
23:33:57       1   99.80    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00
#+END_SRC

*** pidstat
#+BEGIN_SRC sh
$ pidstat -u 5 1

Linux 4.9.125-linuxkit (dd9e2a30ebff) 	06/18/19 	_x86_64_	(2 CPU)
 
23:35:21      UID       PID    %usr %system  %guest    %CPU   CPU  Command
23:35:26        0         6   99.40    0.00    0.00   99.40     0  stress
#+END_SRC

** 平均负载案例——I/O 密集型进程——真实环境                          :noexport:
#+BEGIN_SRC sh :results scalar
docker stop geekbang
docker rm geekbang
docker run --rm -d --name geekbang geekbang stress -i 1 --timeout 600
#+END_SRC

#+RESULTS:
: f36ffa36cb128afdb02c4321ee9f26d327b20f431a5744cb5f6f082b9bcd0a31

#+BEGIN_SRC sh :results scalar
docker exec geekbang uptime
#+END_SRC

#+RESULTS:
:  04:05:34 up 1 day,  2:42,  0 users,  load average: 0.43, 0.16, 0.05

#+BEGIN_SRC sh :results scalar
docker exec geekbang mpstat -P ALL 5 1
#+END_SRC

#+RESULTS:
#+begin_example
Linux 4.9.125-linuxkit (df2091c7c1ec) 	06/18/19 	_x86_64_	(2 CPU)

23:39:07     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
23:39:12     all    0.52    0.00   20.52   13.73    0.00    0.92    0.00    0.00    0.00   64.31
23:39:12       0    0.75    0.00   57.46   39.18    0.00    2.61    0.00    0.00    0.00    0.00
23:39:12       1    0.40    0.00    0.60    0.00    0.00    0.00    0.00    0.00    0.00   98.99

Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
Average:     all    0.52    0.00   20.52   13.73    0.00    0.92    0.00    0.00    0.00   64.31
Average:       0    0.75    0.00   57.46   39.18    0.00    2.61    0.00    0.00    0.00    0.00
Average:       1    0.40    0.00    0.60    0.00    0.00    0.00    0.00    0.00    0.00   98.99
#+end_example

#+BEGIN_SRC sh :results scalar
docker exec geekbang pidstat -u 5 1
#+END_SRC

#+RESULTS:
: Linux 4.9.125-linuxkit (f36ffa36cb12) 	06/19/19 	_x86_64_	(2 CPU)
: 
: 04:05:40      UID       PID    %usr %system  %guest    %CPU   CPU  Command
: 04:05:45        0         6    0.20   34.93    0.00   35.13     0  stress
: 
: Average:      UID       PID    %usr %system  %guest    %CPU   CPU  Command
: Average:        0         6    0.20   34.93    0.00   35.13     -  stress
** 平均负载案例——I/O 密集型进程
*** env
#+BEGIN_SRC sh :results scalar
$ stress -i 1 --timeout 600
$ uptime

23:37:47 up 23:45,  0 users,  load average: 1.13, 0.93, 0.68
#+END_SRC

*** mpstat
#+BEGIN_SRC sh :results scalar
$ mpstat -P ALL 5 1

Linux 4.9.125-linuxkit (df2091c7c1ec) 	06/18/19 	_x86_64_	(2 CPU)

23:39:07     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
23:39:12     all    0.52    0.00   20.52   13.73    0.00    0.92    0.00    0.00    0.00   64.31
23:39:12       0    0.75    0.00   57.46   39.18    0.00    2.61    0.00    0.00    0.00    0.00
23:39:12       1    0.40    0.00    0.60    0.00    0.00    0.00    0.00    0.00    0.00   98.99
#+END_SRC

*** pidstat
#+BEGIN_SRC sh :results scalar
$ pidstat -u 5 1

Linux 4.9.125-linuxkit (df2091c7c1ec) 	06/18/19 	_x86_64_	(2 CPU)

23:41:42      UID       PID    %usr %system  %guest    %CPU   CPU  Command 
23:41:47        0         6    0.80   30.40    0.00   31.20     0  stress
#+END_SRC

** 平均负载案例——大量进程——真实环境                                :noexport:
#+BEGIN_SRC sh :results scalar :exports none
docker stop geekbang
docker rm geekbang
docker run --rm -d --name geekbang geekbang stress -c 8 --timeout 600
#+END_SRC

#+RESULTS:
: geekbang
: e45e78f71450210f621af7cc0ec3458967abf4a25b049370167d1e2ea79a312d

#+BEGIN_SRC sh :results scalar :exports none
docker exec geekbang uptime
#+END_SRC

#+RESULTS:
:  06:12:25 up 1 day, 14:53,  0 users,  load average: 5.02, 2.12, 1.10

#+BEGIN_SRC sh :results scalar
docker exec geekbang mpstat -P ALL 1 1
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results scalar :exports none
docker exec geekbang pidstat -u 5 1
#+END_SRC

#+RESULTS:
#+begin_example
Linux 4.9.125-linuxkit (e45e78f71450) 	06/20/19 	_x86_64_	(2 CPU)

06:12:51      UID       PID    %usr %system  %guest    %CPU   CPU  Command
06:12:55        0         6   25.20    0.00    0.00   25.20     0  stress
06:12:55        0         7   24.80    0.00    0.00   24.80     1  stress
06:12:55        0         8   25.00    0.00    0.00   25.00     0  stress
06:12:55        0         9   24.60    0.00    0.00   24.60     1  stress
06:12:55        0        10   24.60    0.00    0.00   24.60     1  stress
06:12:55        0        11   24.40    0.20    0.00   24.60     1  stress
06:12:55        0        12   24.80    0.00    0.00   24.80     0  stress
06:12:55        0        13   24.80    0.00    0.00   24.80     0  stress

Average:      UID       PID    %usr %system  %guest    %CPU   CPU  Command
Average:        0         6   25.20    0.00    0.00   25.20     -  stress
Average:        0         7   24.80    0.00    0.00   24.80     -  stress
Average:        0         8   25.00    0.00    0.00   25.00     -  stress
Average:        0         9   24.60    0.00    0.00   24.60     -  stress
Average:        0        10   24.60    0.00    0.00   24.60     -  stress
Average:        0        11   24.40    0.20    0.00   24.60     -  stress
Average:        0        12   24.80    0.00    0.00   24.80     -  stress
Average:        0        13   24.80    0.00    0.00   24.80     -  stress
#+end_example

** 平均负载案例——大量进程
*** env
#+BEGIN_SRC sh :results scalar
$ stress -c 8 --timeout 600
$ uptime
23:52:10 up 1 day, 0 min,  0 users,  load average: 8.11, 6.82, 3.93
#+END_SRC

*** mpstat
#+BEGIN_SRC sh :results scalar
$ mpstat -P ALL 1 1
04:11:18     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
04:11:19     all  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
04:11:19       0  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
04:11:19       1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
#+END_SRC

*** pidstat
#+BEGIN_SRC sh
$ pidstat -u 5 1

04:12:59      UID       PID    %usr %system  %guest    %CPU   CPU  Command
04:13:04        0         8   24.95    0.00    0.00   24.95     0  stress
04:13:04        0         9   24.75    0.00    0.00   24.75     1  stress
04:13:04        0        10   24.55    0.00    0.00   24.55     0  stress
04:13:04        0        12   24.15    0.20    0.00   24.35     1  stress
04:13:04        0        13   24.95    0.00    0.00   24.95     0  stress
04:13:04        0        14   24.75    0.00    0.00   24.75     0  stress
04:13:04        0        15   24.75    0.00    0.00   24.75     1  stress
#+END_SRC

** 平均负载多少是合理
- 平均负载最理想情况是等于CPU个数
- 当平均负载超过CPU个数时，系统发生过载
- 当平均负载有明显升高趋势时，需要做分析和调查
* CPU 上下文切换
** CPU 上下文切换定义
#+ATTR_LATEX: :width 0.60\textwidth
[[file:98ac9df2593a193d6a7f1767cd68eb5f.png]]
CPU 上下文切换：把前一个任务的 CPU 上下文（也就是寄存器和程序计数器）保存起来，然后加载新任务的上下文到寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务
** CPU 上下文切换种类
- 进程上下文切换
- 线程上下文切换
- 中断上下文切换
** CPU 上下文切换——进程上下文切换
#+ATTR_LATEX: :width 0.60\textwidth
[[file:395666667d77e718da63261be478a96b.png]]
- 进程切换只发生在内核态
- 在保存当前进程的内核状态和 CPU 寄存器之前，需要先把该进程的虚拟内存、栈等保存下来；而加载了下一进程的内核态后，还需要刷新进程的虚拟内存和用户栈。
- 进程上下文切换时机
  1. CPU时间片耗尽被挂起
  2. 系统资源（如内存）不足被挂起
  3. 调用睡眠函数被挂起
  4. 因其他高优先级进程而被挂起
  5. 发生硬件中断时，CPU上的进程会被中断挂起

** CPU 上下文切换——线程上下文切换
如果两个线程属于同一个进程，此时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。
** CPU 上下文切换——中断上下文切换
为了快速响应硬件的事件，中断处理会打断进程的正常调度和执行，转而调用中断处理程序，响应设备事件。而在打断其他进程时，就需要将进程当前的状态保存下来，这样在中断结束后，进程仍然可以从原来的状态恢复运行。
** CPU 上下文切换——案例——真实环境                                  :noexport:
#+BEGIN_SRC sh :results scalar
docker stop geekbang
docker rm geekbang
docker run --privileged  -d --name geekbang geekbang sysbench --max-requests=10000000 --num-threads=10 --max-time=300 --test=threads run
#+END_SRC

#+RESULTS:
: eddaeff1a092a818793a568fdd579a87da40daf0b2034915bc5bbaff039261d1

#+BEGIN_SRC sh :results scalar
docker exec geekbang top -b -n 1
#+END_SRC

#+RESULTS:
: top - 05:36:33 up 1 day,  4:13,  0 users,  load average: 7.33, 5.68, 3.11
: Tasks:   2 total,   1 running,   1 sleeping,   0 stopped,   0 zombie
: %Cpu(s):  3.7 us,  1.2 sy,  0.0 ni, 95.0 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st
: KiB Mem :  2047036 total,   512088 free,   257704 used,  1277244 buff/cache
: KiB Swap:  1048572 total,  1047880 free,      692 used.  1600024 avail Mem 
: 
:   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
:     1 root      20   0   28768   2376   2044 S 200.0  0.1   4:32.72 sysbench
:    33 root      20   0   36528   3012   2656 R   0.0  0.1   0:00.03 top

#+BEGIN_SRC sh :results scalar
docker exec geekbang pidstat -wt -u 1 1
#+END_SRC

#+RESULTS:
#+begin_example
Linux 4.9.125-linuxkit (cbf5a90b7b2e) 	06/19/19 	_x86_64_	(2 CPU)

05:31:53      UID      TGID       TID    %usr %system  %guest    %CPU   CPU  Command
05:31:54        0         1         -   14.00  154.00    0.00  168.00     0  sysbench
05:31:54        0         -         6    2.00   14.00    0.00   16.00     0  |__sysbench
05:31:54        0         -         7    1.00   18.00    0.00   19.00     0  |__sysbench
05:31:54        0         -         8    1.00   15.00    0.00   16.00     0  |__sysbench
05:31:54        0         -         9    2.00   14.00    0.00   16.00     1  |__sysbench
05:31:54        0         -        10    1.00   16.00    0.00   17.00     1  |__sysbench
05:31:54        0         -        11    1.00   14.00    0.00   15.00     1  |__sysbench
05:31:54        0         -        12    1.00   15.00    0.00   16.00     1  |__sysbench
05:31:54        0         -        13    2.00   16.00    0.00   18.00     0  |__sysbench
05:31:54        0         -        14    1.00   16.00    0.00   17.00     1  |__sysbench
05:31:54        0         -        15    3.00   16.00    0.00   19.00     0  |__sysbench

05:31:53      UID      TGID       TID   cswch/s nvcswch/s  Command
05:31:54        0         -         6   6916.00  79048.00  |__sysbench
05:31:54        0         -         7   7813.00  50731.00  |__sysbench
05:31:54        0         -         8   6608.00 109976.00  |__sysbench
05:31:54        0         -         9   6617.00  80314.00  |__sysbench
05:31:54        0         -        10   6058.00  71238.00  |__sysbench
05:31:54        0         -        11   7146.00  90042.00  |__sysbench
05:31:54        0         -        12   4209.00  92170.00  |__sysbench
05:31:54        0         -        13   8368.00  77227.00  |__sysbench
05:31:54        0         -        14   9565.00  66525.00  |__sysbench
05:31:54        0         -        15   8958.00  45595.00  |__sysbench
05:31:54        0       213         -      1.00      0.00  pidstat
05:31:54        0         -       213      1.00      0.00  |__pidstat
05:31:54        0       234         -      1.00      0.00  pidstat
05:31:54        0         -       234      1.00      0.00  |__pidstat

Average:      UID      TGID       TID    %usr %system  %guest    %CPU   CPU  Command
Average:        0         1         -   14.00  154.00    0.00  168.00     -  sysbench
Average:        0         -         6    2.00   14.00    0.00   16.00     -  |__sysbench
Average:        0         -         7    1.00   18.00    0.00   19.00     -  |__sysbench
Average:        0         -         8    1.00   15.00    0.00   16.00     -  |__sysbench
Average:        0         -         9    2.00   14.00    0.00   16.00     -  |__sysbench
Average:        0         -        10    1.00   16.00    0.00   17.00     -  |__sysbench
Average:        0         -        11    1.00   14.00    0.00   15.00     -  |__sysbench
Average:        0         -        12    1.00   15.00    0.00   16.00     -  |__sysbench
Average:        0         -        13    2.00   16.00    0.00   18.00     -  |__sysbench
Average:        0         -        14    1.00   16.00    0.00   17.00     -  |__sysbench
Average:        0         -        15    3.00   16.00    0.00   19.00     -  |__sysbench

Average:      UID      TGID       TID   cswch/s nvcswch/s  Command
Average:        0         -         6   6916.00  79048.00  |__sysbench
Average:        0         -         7   7813.00  50731.00  |__sysbench
Average:        0         -         8   6608.00 109976.00  |__sysbench
Average:        0         -         9   6617.00  80314.00  |__sysbench
Average:        0         -        10   6058.00  71238.00  |__sysbench
Average:        0         -        11   7146.00  90042.00  |__sysbench
Average:        0         -        12   4209.00  92170.00  |__sysbench
Average:        0         -        13   8368.00  77227.00  |__sysbench
Average:        0         -        14   9565.00  66525.00  |__sysbench
Average:        0         -        15   8958.00  45595.00  |__sysbench
Average:        0       213         -      1.00      0.00  pidstat
Average:        0         -       213      1.00      0.00  |__pidstat
Average:        0       234         -      1.00      0.00  pidstat
Average:        0         -       234      1.00      0.00  |__pidstat
#+end_example

#+BEGIN_SRC sh :results scalar
docker exec geekbang cat /proc/softirqs
#+END_SRC

#+RESULTS:
#+begin_example
                    CPU0       CPU1       
          HI:          0          0
       TIMER:     828373    2610403
      NET_TX:        119        162
      NET_RX:     559439     124883
       BLOCK:    3207824      58474
    IRQ_POLL:          0          0
     TASKLET:          1          0
       SCHED:     427779    2111103
     HRTIMER:          0          0
         RCU:     207760    1007282
#+end_example

** CPU 上下文切换——案例
*** env
#+BEGIN_SRC sh
$ sysbench --max-requests=10000000 --num-threads=10 --max-time=300 --test=threads run
#+END_SRC

*** top
#+BEGIN_SRC sh
$ top -b -n 1

top - 05:36:33 up 1 day,  4:13,  0 users,  load average: 7.33, 5.68, 3.11
Tasks:   2 total,   1 running,   1 sleeping,   0 stopped,   0 zombie
 
PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
  1 root      20   0   28768   2376   2044 S 200.0  0.1   4:32.72 sysbench
#+END_SRC

** CPU 上下文切换——案例
*** pidstat
#+BEGIN_SRC sh
$ pidstat -wt -u 1 1

Linux 4.9.125-linuxkit (cbf5a90b7b2e) 	06/19/19 	_x86_64_	(2 CPU)

05:31:53      UID      TGID       TID    %usr %system  %guest    %CPU   CPU  Command
05:31:54        0         1         -   14.00  154.00    0.00  168.00     0  sysbench
05:31:54        0         -         6    2.00   14.00    0.00   16.00     0  |__sysbench
05:31:54        0         -         9    2.00   14.00    0.00   16.00     1  |__sysbench
05:31:54        0         -        10    1.00   16.00    0.00   17.00     1  |__sysbench

05:31:53      UID      TGID       TID   cswch/s nvcswch/s  Command
05:31:54        0         -         6   6916.00  79048.00  |__sysbench
05:31:54        0         -         7   7813.00  50731.00  |__sysbench
05:31:54        0         -         8   6608.00 109976.00  |__sysbench
#+END_SRC
*** 自愿上下文切换
指进程无法获取所需资源，导致的上下文切换。比如说， I/O、内存等系统资源不足时，就会发生自愿上下文切换。
*** 非自愿上下文切换
指进程由于时间片已到等原因，被系统强制调度，进而发生的上下文切换。比如说，大量进程都在争抢 CPU 时，就容易发生非自愿上下文切换。

** CPU 上下文切换——案例
*** interrupts
#+BEGIN_SRC sh
$ watch -d cat /proc/interrupts

           CPU0       CPU1
...
RES:    9237158    9985196   Rescheduling interrupts
...
#+END_SRC
变化速度最快的是重调度中断（RES），这个中断类型表示，唤醒空闲状态的 CPU 来调度新的任务运行。这是多处理器系统（SMP）中，调度器用来分散任务到不同 CPU 的机制，通常也被称为处理器间中断（Inter-Processor Interrupts，IPI）。
*** softirqs                                                       :noexport:
#+BEGIN_SRC sh
$ cat /proc/softirqs

                    CPU0       CPU1       
          HI:          0          0
       TIMER:     828373    2610403
      NET_TX:        119        162
      NET_RX:     559439     124883
       BLOCK:    3207824      58474
    IRQ_POLL:          0          0
     TASKLET:          1          0
       SCHED:     427779    2111103
     HRTIMER:          0          0
         RCU:     207760    1007282
#+END_SRC











* 基础概念                                                         :noexport:

** top
*** 进程状态
- R: Running 或 Runnalbe 的缩写，表示进程在 CPU 的就绪队列中
- D: Disk Sleep 的缩写。也就是不可中断状态睡眠（Uninterruptible Sleep）
- Z: Zombie 的缩写。表示僵尸进程。进程实际已经结束了，但父进程还没回收它的资源
- S：Interruptible Sleep 的缩写，可中断状态睡眠。表示进程因为等待某件事件而被系统挂起。当进程等待的事件发生时，它会被唤醒并进入R状态
- I: Idle 的缩写，空闲状态。用在不可中断睡眠的内核线程上

* 场景案例                                                         :noexport:
** Docker 基础镜像构建

*** 环境准备 
#+BEGIN_SRC sh :results scalar
cd `mktemp -d`
#cd /tmp/a
cat << EOF > sources.list
deb-src http://archive.ubuntu.com/ubuntu xenial main restricted
deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted
deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe
deb http://mirrors.aliyun.com/ubuntu/ xenial universe
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe
deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
deb http://archive.canonical.com/ubuntu xenial partner
deb-src http://archive.canonical.com/ubuntu xenial partner
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe
deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe
deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse
EOF

cat << EOF > Dockerfile
FROM ubuntu:16.04

COPY sources.list /etc/apt/sources.list
RUN apt-get update && apt-get install -y \
stress sysstat sysbench \
linux-tools-common linux-tools-generic

EOF

docker build -t geekbang .
#+END_SRC

  #+RESULTS:
  #+begin_example
  Sending build context to Docker daemon  4.096kB
  Step 1/3 : FROM ubuntu:16.04
   ---> 13c9f1285025
  Step 2/3 : COPY sources.list /etc/apt/sources.list
   ---> Using cache
   ---> 06c92b732ad9
  Step 3/3 : RUN apt-get update && apt-get install -y stress sysstat sysbench linux-tools-common linux-tools-generic
   ---> Using cache
   ---> 133db1890d3b
  Successfully built 133db1890d3b
  Successfully tagged geekbang:latest
  #+end_example
** CPU 密集型场景
*** 初始化环境
 #+BEGIN_SRC sh :results scalar
docker stop geekbang
docker run --privileged --name geekbang --rm -d geekbang sleep infinity
 #+END_SRC

 #+RESULTS:
 : geekbang
 : 94aaa78fffadb316137f0ca10417b20e8e3ca515415e1e0332287a790a634c2c
 
*** 服务状态分析
 #+BEGIN_SRC sh :results scalar
docker exec geekbang mpstat -P ALL 1 1
echo '---'
docker exec geekbang pidstat -u 1 1
 #+END_SRC

 #+RESULTS:
 #+begin_example
Linux 4.9.125-linuxkit (22cc35bfdb8a) 	06/10/19 	_x86_64_	(2 CPU)

04:20:59     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
04:21:00     all   50.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   49.00
04:21:00       0    1.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   98.00
04:21:00       1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00

Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
Average:     all   50.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   49.00
Average:       0    1.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   98.00
Average:       1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
---
Linux 4.9.125-linuxkit (22cc35bfdb8a) 	06/10/19 	_x86_64_	(2 CPU)

04:21:00      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command
04:21:01        0        13   99.01    0.00    0.00    0.99   99.01     1  stress

Average:      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command
Average:        0        13   99.01    0.00    0.00    0.99   99.01     -  stress
 #+end_example

#+BEGIN_SRC sh
docker exec 

#+END_SRC

#+BEGIN_SRC sh :results scalar
docker exec geekbang /usr/lib/linux-tools-4.4.0-151/perf --version
#+END_SRC

#+RESULTS:
: perf version 3.13.11-ckt39

#+BEGIN_SRC sh :results scalar
docker exec geekbang pidstat -w 5 1
#+END_SRC

#+RESULTS:
: Linux 4.9.125-linuxkit (94aaa78fffad) 	06/18/19 	_x86_64_	(2 CPU)
: 
: 12:34:24      UID       PID   cswch/s nvcswch/s  Command
: 12:34:29        0        76      0.20      0.00  pidstat
: 
: Average:      UID       PID   cswch/s nvcswch/s  Command
: Average:        0        76      0.20      0.00  pidstat

iostat
iotop
