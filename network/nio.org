#+TITLE: NIO

* Buffer
#+begin_src java :classname NioBuffer :cmdline "-cp ." :exports both :results output
  import java.nio.ByteBuffer;
  import java.nio.Buffer;

  class NioBuffer {
      public static void main(String[] args) {

          // 创建一个 10 字节的 buffer
          ByteBuffer buf = ByteBuffer.allocate(10);
          System.out.println("Allocate 10 size buffer. " + dumpBuf(buf));

          // 将 1 2 3 4 写入 buffer 中
          buf.put((byte)1);
          buf.put((byte)2);
          buf.put((byte)3);
          buf.put((byte)4);
          System.out.println("Put 1,2,3,4 into buffer. " + dumpBuf(buf));

          // 翻转 buffer，将其从写模式转换为读模式
          buf.flip();
          System.out.println("Buffer flip. " + dumpBuf(buf));

          // 读取并打印 buffer
          readBuf(buf);

          // 倒带，实现重复读取之前的数据
          buf.rewind();

          System.out.println("Buffer rewind. " + dumpBuf(buf));

          // 读取并打印数据
          readBuf(buf);

          // 清空 buffer
          buf.clear();
          System.out.println("Buffer clear. " + dumpBuf(buf));

      }

      static String dumpBuf(Buffer buf) {
          return "Position = " + buf.position() + ", limit = " + buf.limit() + ", capacity = " + buf.capacity();
      }

      static void readBuf(ByteBuffer buf) {
          System.out.println("Read buffer");

          while(buf.hasRemaining()) {
              System.out.println("Read: " + buf.get() + ". " + dumpBuf(buf));
          }
      }
  }
#+end_src

#+RESULTS:
#+begin_example
Allocate 10 size buffer. Position = 0, limit = 10, capacity = 10
Put 1,2,3,4 into buffer. Position = 4, limit = 10, capacity = 10
Buffer flip. Position = 0, limit = 4, capacity = 10
Read buffer
Read: 1. Position = 1, limit = 4, capacity = 10
Read: 2. Position = 2, limit = 4, capacity = 10
Read: 3. Position = 3, limit = 4, capacity = 10
Read: 4. Position = 4, limit = 4, capacity = 10
Buffer rewind. Position = 0, limit = 4, capacity = 10
Read buffer
Read: 1. Position = 1, limit = 4, capacity = 10
Read: 2. Position = 2, limit = 4, capacity = 10
Read: 3. Position = 3, limit = 4, capacity = 10
Read: 4. Position = 4, limit = 4, capacity = 10
Buffer clear. Position = 0, limit = 10, capacity = 10
#+end_example

* FileChannel
#+begin_src java :classname FileChannelDemo :cmdline "-cp ." :exports both :results output
  import java.io.File;
  import java.io.FileInputStream;
  import java.io.FileOutputStream;
  import java.io.RandomAccessFile;
  import java.nio.Buffer;
  import java.nio.ByteBuffer;
  import java.nio.channels.FileChannel;

  class FileChannelDemo {
      public static void main(String[] args) throws Exception {

          String fileName = "file-channel-demo";

          // 创建一个临时文件
          File file = createTempFile(fileName);

          RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rws");
          // 获取临时文件的 channel
          FileChannel channel = randomAccessFile.getChannel();

          ByteBuffer buf = ByteBuffer.allocate(16);

          // 将 1 2 写入 buffer 中
          buf.put((byte) 1);
          buf.put((byte) 2);

          // 翻转 buffer，因为现在 buffer 处于写模式
          // 通过 flip 将 buffer 修改为读模式，供下方 channel 读取
          buf.flip();

          while(buf.hasRemaining()) {
              channel.write(buf);
          }

          // 清空 buffer
          buf.clear();

          // 将 channel 位置归 0
          // 因为接下来需要从 0 位置开始读取数据
          channel.position(0);

          // 将 channel 数据读入 buffer 中
          channel.read(buf);

          // 翻转 buffer，因为上一步其实是在往 buffer 中写数据，所以为写模式
          // 现在通过 flip 将其修改为读模式
          buf.flip();

          // 打印 buffer 中的所有元素
          while (buf.hasRemaining()) {
              System.out.println(buf.get());
          }

      }

      static File createTempFile(String fileName) throws Exception {
          // 创建一个临时文件
          File file = File.createTempFile(fileName, "");

          // JVM退出前自动删除
          file.deleteOnExit();

          return file;
      }

  }
#+end_src

#+RESULTS:
: 1
: 2

* SocketChannel
  #+begin_src java :classname SocketChannelDemo :cmdline "-cp ." :exports both :results output
    import java.nio.channels.SocketChannel;
    import java.nio.ByteBuffer;
    import java.net.InetSocketAddress;

    class SocketChannelDemo {
        public static void main(String[] args) throws Exception {

            SocketChannel channel = SocketChannel.open();
            channel.connect(new InetSocketAddress("jenkov.com", 80));
            System.out.println("connect");

            ByteBuffer buffer = ByteBuffer.wrap("GET /\n".getBytes());

            while (buffer.hasRemaining()) {
                channel.write(buffer);
            }

            System.out.println("Write 'GET /'");

            buffer.clear();

            System.out.println("Reading data from response");
            System.out.println();

            int bytesRead = channel.read(buffer);

            while (bytesRead != -1) {
                buffer.flip();

                while(buffer.hasRemaining()) {
                    System.out.print((char)buffer.get());
                }

                buffer.clear();
                bytesRead = channel.read(buffer);
            }

            System.out.println("End read");

            channel.close();

        }
    }
  #+end_src

  #+RESULTS:
  #+begin_example
  connect
  Write 'GET /'
  Reading data from response

  HTTP/1.1 400 HTTP/0.9 not supported
  Content-Length: 0
  Connection: close
  Server: Jetty(9.3.1.v20150714)
  
  End read
  #+end_example

* ServerSocketChannel
  #+begin_src java :classname ServerSocketChannelDemo :cmdline "-cp ." :results output :exports both
    import java.nio.ByteBuffer;
    import java.nio.channels.SocketChannel;
    import java.nio.channels.Selector;
    import java.nio.channels.SelectionKey;
    import java.nio.channels.ServerSocketChannel;
    import java.net.InetSocketAddress;
    import java.util.Set;
    import java.util.Iterator;
    import java.time.LocalDateTime;

    class ServerSocketChannelDemo {
        static int PORT = 8879;

        public static void main(String[] args) throws Exception {
            Server server = new Server();
            server.start();
            Thread.sleep(100);

            Client client = new Client();
            client.start();

            Thread.sleep(200);
            server.stopServer();
            client.stopClient();
        }

        static void log(String msg) {
            System.out.println(LocalDateTime.now() + ": " + msg);
        }

        static class Client extends Thread {
            SocketChannel socketChannel;
            Selector selector;

            public Client() throws Exception {
                socketChannel = SocketChannel.open();
                socketChannel.configureBlocking(false);
                socketChannel.connect(new InetSocketAddress("127.0.0.1", PORT));

                selector = Selector.open();

                SelectionKey key = socketChannel.register(selector, SelectionKey.OP_CONNECT);
            }

            public void stopClient() throws Exception {
                this.interrupt();
                this.socketChannel.close();
            }

            public void run() {

                while (!this.isInterrupted()) {
                    try {
                        int readyChannels = selector.select(10000);

                        if (readyChannels == 0) continue;

                        Set<SelectionKey> keys = selector.selectedKeys();
                        Iterator<SelectionKey> iterator = keys.iterator();

                        while (iterator.hasNext()) {
                            SelectionKey key = iterator.next();

                            if (key.isConnectable()) {
                                log("{Client} client is connectable");
                                if (socketChannel.finishConnect()) {
                                    log("{Client} finish connect");
                                    key.interestOps(SelectionKey.OP_WRITE);
                                }
                            } else if (key.isReadable()) {
                                log("{Client} client is readable");
                                ByteBuffer buffer = ByteBuffer.allocate(32);
                                socketChannel.read(buffer);
                                log("{Client} read data from server: " + new String(buffer.array()));
                                // key.interestOps(SelectionKey.OP_WRITE);
                            } else if (key.isWritable()) {
                                log("{Client} client is writable");
                                ByteBuffer buffer = ByteBuffer.wrap("I am client".getBytes());
                                socketChannel.write(buffer);
                                log("{Client} send data to server");
                                key.interestOps(SelectionKey.OP_READ);
                            }
                        }
                    }
                    catch (Throwable e) {
                        System.out.println("Error " + e.getMessage());
                        e.printStackTrace();
                    }
                }
            }

        }

        static class Server extends Thread {

            ServerSocketChannel serverSocketChannel;
            Selector selector;

            public Server() throws Exception {
                serverSocketChannel = ServerSocketChannel.open();
                serverSocketChannel.socket().bind(new InetSocketAddress(PORT));
                serverSocketChannel.configureBlocking(false);

                selector = Selector.open();

                SelectionKey key = serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);
            }

            public void stopServer() throws Exception {
                this.interrupt();
                this.serverSocketChannel.close();
            }

            public void run() {

                while (!this.isInterrupted()) {

                    try {

                        // 等待 10 秒
                        int readyChannels = selector.select(10000);

                        if (readyChannels == 0) continue;

                        Set<SelectionKey> keys = selector.selectedKeys();

                        Iterator<SelectionKey> iterator = keys.iterator();

                        while (iterator.hasNext()) {

                            SelectionKey key = iterator.next();
                            iterator.remove();

                            if (key.isAcceptable()) {
                                SocketChannel socketChannel = serverSocketChannel.accept();
                                socketChannel.configureBlocking(false);
                                socketChannel.register(selector, SelectionKey.OP_READ);
                                log("{Server} Accept a socket");
                            } else if (key.isReadable()) {
                                SocketChannel socketChannel = (SocketChannel) key.channel();
                                ByteBuffer buffer = ByteBuffer.allocate(128);
                                socketChannel.read(buffer);
                                key.interestOps(SelectionKey.OP_WRITE);
                                log("{Server} Read data from client");
                            } else if (key.isWritable()) {
                                SocketChannel socketChannel = (SocketChannel) key.channel();
                                ByteBuffer buffer = ByteBuffer.wrap("Hello from server".getBytes());
                                socketChannel.write(buffer);
                                key.interestOps(SelectionKey.OP_READ);
                                log("{Server} Write data to client");
                            }
                        }

                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }

                }
            }

        }

    }
  #+end_src

  #+RESULTS:
  : 2020-09-08T12:11:35.826: {Client} client is connectable
  : 2020-09-08T12:11:35.826: {Server} Accept a socket
  : 2020-09-08T12:11:35.827: {Client} finish connect
  : 2020-09-08T12:11:35.827: {Client} client is writable
  : 2020-09-08T12:11:35.829: {Client} send data to server
  : 2020-09-08T12:11:35.829: {Server} Read data from client
  : 2020-09-08T12:11:35.829: {Server} Write data to client
  : 2020-09-08T12:11:35.829: {Client} client is readable
  : 2020-09-08T12:11:35.829: {Client} read data from server: Hello from server               


* 参考资料
- [[https://wiki.jikexueyuan.com/project/java-nio-zh/java-nio-buffer.html][04. Java NIO Buffer缓冲区]]
- [[https://stackoverflow.com/questions/19831893/not-able-to-read-file-using-java-nio-channels-filechannel][Not able to read file using java.nio.channels.FileChannel]]
