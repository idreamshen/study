* UML
#+begin_src plantuml :file threadpool.png :exports results
interface Executor {
  + void execute(Runnable command)
}

interface ExecutorService extends Executor {
  + void shutdown()
  + List<Runnable> shutdownNow()
  + boolean isShutdown()
  + boolean isTerminated()
  + boolean awaitTermination(long timeout, TimeUnit unit)
  + <T> Future<T> submit(Callable<T> task)
  + <T> Future<T> submit(Runnable, T result)
  + Future<?> submit(Runnable task)
  + <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
  + <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
  + <T> T invokeAny(Collection<? extends Callable<T>> tasks)
  + <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) 
}

abstract class AbstractExecutorService implements ExecutorService {
  # <T> RunnableFuture<T> newTaskFor(Runnable runnable, T vaule)
  # <T> RunnableFuture<T> newTaskFor(Callable<T> callable)
  + Future<?> submit(Runnable task)
  + <T> Future<T> submit(Runnable task, T result)
  + <T> Future<T> submit(Callable<T> task)
  - <T> T doInvokeAny(Collection<? extends Callable<T>> tasks, boolean timed, long nanos)
  + <T> T invokeAny(Collection<? extends Callable<T>> tasks)
  + <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
  + <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
  + <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
}

class ThreadPoolExecutor extends AbstractExecutorService {
  - BLockingQueue<Runnable> workQueue
  - ReentrantLock mainLock
  - HashSet<Worker> workers
  - Condition termination
  - volatile ThreadFactory threadFactory
  - volatile RejectedExecutionHandler handler
  - volatile long keepAliveTime
  - volatile boolean allowCoreThreadTimeOut
  - volatile int corePoolSize
  - volatile int maximumPoolSize
  - {static} RejectedExecutionHandler defaultHandler
  ~ void tryTerminate()
  - void interruptWorkers()
  - void interruptIdleWorkers(boolean onlyOne)
  - void interruptIdleWorkers()
  - void reject(Runnable command)
  ~ void onShutdown()
  - List<Runnable> drainQUeue
  - boolean addWorker(Runnable firstTask, boolean core)
  - void addWorkerFailed(Worker w)
  - void processWorkerExit(Worker w, boolean completedAbruptly)
  - Runnable getTask()
  ~ void runWorker(Worker w)
  + ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue)
  + ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory)
  + ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler)
  + ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)
  + void execute(Runnable command)
  + void shutdown()
  + List<Runnable> shutdownNow()
  + boolean isShutdown()
  + boolean isTerminating()
  + boolean isTerminated()
  + boolean awaitTermination(long timeout, TimeUnit unit)
  # void finalize()
  + boolean remove(Runnable task)
  + void purge()
  # void beforeExecute(Thread t, Runnable r)
  # void afterExecute(Runnable r, Throwable t)
  # void terminated()
}

interface RejectedExecutionHandler {
  + void rejectedExecution(Runnable r, ThreadPoolExecutor executor)
}

class CallerRunsPolicy implements RejectedExecutionHandler
class AbortPolicy implements RejectedExecutionHandler
class DiscardPolicy implements RejectedExecutionHandler
class DiscardOldestPolicy implements RejectedExecutionHandler

class Worker extends AbstractQueuedSynchronizer implements Runnable {
  ~ Thread thread
  ~ Runnable firstTask
  ~ Worker(Runnable firstTask)
  + void run()
  # booblean isHeldExclusively()
  # boolean tryAcquire(int unused)
  # boolean tryRelease(int unused)
  + void lock()
  + boolean tryLock()
  + void unlock()
  + boolean isLocked()
  # interruptIfStarted
}

ThreadPoolExecutor -- Worker
ThreadPoolExecutor -- RejectedExecutionHandler
#+end_src

#+RESULTS:
[[file:threadpool.png]]

* ThreadPoolExecutor 线程池状态
** 状态定义

*** 定义
- 运行：接受新的任务，并处理队列中的任务
- 关闭：不接受新的任务，但处理队列中的任务
- 停止：不接受新的任务，不处理队列中的任务，中断正在处理中的任务
- 整理：
- 终止：terminated() 方法执行完成

*** 原文
- RUNNING: Accept new tasks and process queued tasks 
- SHUTDOWN: Don't accept new tasks, but process queued tasks
- STOP: Don't accept new tasks, don't process queued tasks, and interrupt in-progress tasks
- TIDYING: All tasks have terminated, workerCount is zero, the thread transitioning to state TIDYING will run the terminated() hook method
- TERMINATED: terminated() has completed

** 状态变化
   
*** 变化 
- 运行 -> 关闭
shudown() 被执行

- 运行、关闭 -> 停止
shutdownNow() 被执行

- 关闭 -> 整理

- 停止 -> 整理

- 整理 -> 终止
terminated() 执行完成
*** 原文
- RUNNING -> SHUTDOWN
On invocation of shutdown(), perhaps implicitly in finalize()

- (RUNNING or SHUTDOWN) -> STOP
On invocation of shutdownNow()

- SHUTDOWN -> TIDYING
When both queue and pool are empty

- STOP -> TIDYING
When pool is empty

- TIDYING -> TERMINATED
When the terminated() hook method has completed
 
* 源码分析
** execute
#+begin_src java
  void execute(Runnable command) {
      int c = ctl.get();

      // 当前工作线程小于核心线程数量
      if (workerCountOf(c) < corePoolSize) {
          if (addWorker(command, true)) {
              return;
          }
          c = ctl.get();
      }

      /*
       ,* 1. 上面的场景下提交任务失败
       ,* 2. 当前工作线程数大于等于核心线程数
       ,* 当满足上述两个条件时，进入下方逻辑判断
       ,* 1. 当前状态必须是运行中
       ,* 2. 任务队列未满，并且将任务成功加入队列
       ,*/
      if (isRunning(c) && workQueue.offer(command)) {
          // 重新读取状态
          int recheck = ctl.get();

          /*
           ,* 二次校验，如果不是运行状态，
           ,* 需要执行任务移除操作。
           ,* 二次校验的原因如下：
           ,*
           ,* isRunning(c) && workQueue.offer(command)
           ,* 不是原子操作。可能会出现任务入队时，
           ,* 线程池状态已经变为非 Running 状态了。
           ,* 此时这个任务可能会没有 Worker 接管。故需要
           ,* 对线程池状态进行二次确认
           ,*/
          if (!isRunning(recheck)) {
              // 从队列中移除任务
              if (remove(command)) {
                  // 触发任务拒绝
                  reject(command);
              }
          } else if (workerCountOf(recheck) == 0) {
              addWorker(null, false);
          } else {
              // 啥都不做
          }
      } else if (!addWorker(command, false)) {
          reject(command);
      } else {

      }
  }
#+end_src

* 参考资料
- [[https://www.throwable.club/2019/07/15/java-concurrency-thread-pool-executor/][JUC线程池ThreadPoolExecutor源码分析]]
