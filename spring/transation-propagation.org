#+TITLE: Spring 事务传播行为

* 类型
1. PROPAGATION_REQUIRED 如果当前没有事务，就新建事务。如果已经存在事务，则加入到这个事务中
2. PROPAGATION_SUPPORTS 支持当前事务。如果当前没有事务，就以非事务方式执行
3. PROPAGATION_MANDATORY 使用当前事务，如果当前没有事务，就抛出异常
4. PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，则挂起当前事务
5. PROPAGATION_NOT_SUPPORTED 以非事务方式执行，如果当前存在事务，就把当前事务挂起
6. PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常
7. PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果没有事务，则新建事务。

* Spring 源码定义
#+begin_src java
  public interface TransactionDefinition {

      /**
       ,* Support a current transaction; create a new one if none exists.
       ,* Analogous to the EJB transaction attribute of the same name.
       ,* <p>This is typically the default setting of a transaction definition,
       ,* and typically defines a transaction synchronization scope.
       ,*/
      int PROPAGATION_REQUIRED = 0;

      /**
       ,* Support a current transaction; execute non-transactionally if none exists.
       ,* Analogous to the EJB transaction attribute of the same name.
       ,* <p><b>NOTE:</b> For transaction managers with transaction synchronization,
       ,* {@code PROPAGATION_SUPPORTS} is slightly different from no transaction
       ,* at all, as it defines a transaction scope that synchronization might apply to.
       ,* As a consequence, the same resources (a JDBC {@code Connection}, a
       ,* Hibernate {@code Session}, etc) will be shared for the entire specified
       ,* scope. Note that the exact behavior depends on the actual synchronization
       ,* configuration of the transaction manager!
       ,* <p>In general, use {@code PROPAGATION_SUPPORTS} with care! In particular, do
       ,* not rely on {@code PROPAGATION_REQUIRED} or {@code PROPAGATION_REQUIRES_NEW}
       ,* <i>within</i> a {@code PROPAGATION_SUPPORTS} scope (which may lead to
       ,* synchronization conflicts at runtime). If such nesting is unavoidable, make sure
       ,* to configure your transaction manager appropriately (typically switching to
       ,* "synchronization on actual transaction").
       ,* @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setTransactionSynchronization
       ,* @see org.springframework.transaction.support.AbstractPlatformTransactionManager#SYNCHRONIZATION_ON_ACTUAL_TRANSACTION
       ,*/
      int PROPAGATION_SUPPORTS = 1;

      /**
       ,* Support a current transaction; throw an exception if no current transaction
       ,* exists. Analogous to the EJB transaction attribute of the same name.
       ,* <p>Note that transaction synchronization within a {@code PROPAGATION_MANDATORY}
       ,* scope will always be driven by the surrounding transaction.
       ,*/
      int PROPAGATION_MANDATORY = 2;

      /**
       ,* Create a new transaction, suspending the current transaction if one exists.
       ,* Analogous to the EJB transaction attribute of the same name.
       ,* <p><b>NOTE:</b> Actual transaction suspension will not work out-of-the-box
       ,* on all transaction managers. This in particular applies to
       ,* {@link org.springframework.transaction.jta.JtaTransactionManager},
       ,* which requires the {@code javax.transaction.TransactionManager} to be
       ,* made available it to it (which is server-specific in standard Java EE).
       ,* <p>A {@code PROPAGATION_REQUIRES_NEW} scope always defines its own
       ,* transaction synchronizations. Existing synchronizations will be suspended
       ,* and resumed appropriately.
       ,* @see org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager
       ,*/
      int PROPAGATION_REQUIRES_NEW = 3;

      /**
       ,* Do not support a current transaction; rather always execute non-transactionally.
       ,* Analogous to the EJB transaction attribute of the same name.
       ,* <p><b>NOTE:</b> Actual transaction suspension will not work out-of-the-box
       ,* on all transaction managers. This in particular applies to
       ,* {@link org.springframework.transaction.jta.JtaTransactionManager},
       ,* which requires the {@code javax.transaction.TransactionManager} to be
       ,* made available it to it (which is server-specific in standard Java EE).
       ,* <p>Note that transaction synchronization is <i>not</i> available within a
       ,* {@code PROPAGATION_NOT_SUPPORTED} scope. Existing synchronizations
       ,* will be suspended and resumed appropriately.
       ,* @see org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager
       ,*/
      int PROPAGATION_NOT_SUPPORTED = 4;

      /**
       ,* Do not support a current transaction; throw an exception if a current transaction
       ,* exists. Analogous to the EJB transaction attribute of the same name.
       ,* <p>Note that transaction synchronization is <i>not</i> available within a
       ,* {@code PROPAGATION_NEVER} scope.
       ,*/
      int PROPAGATION_NEVER = 5;

      /**
       ,* Execute within a nested transaction if a current transaction exists,
       ,* behave like {@link #PROPAGATION_REQUIRED} else. There is no analogous
       ,* feature in EJB.
       ,* <p><b>NOTE:</b> Actual creation of a nested transaction will only work on
       ,* specific transaction managers. Out of the box, this only applies to the JDBC
       ,* {@link org.springframework.jdbc.datasource.DataSourceTransactionManager}
       ,* when working on a JDBC 3.0 driver. Some JTA providers might support
       ,* nested transactions as well.
       ,* @see org.springframework.jdbc.datasource.DataSourceTransactionManager
       ,*/
      int PROPAGATION_NESTED = 6;
  }
#+end_src

* 参考资料
- [[https://segmentfault.com/a/1190000013341344][Spring事务传播行为详解]]
- [[https://www.itzhai.com/trade-transaction-of-data-consistency.html][从一笔交易说起,如何处理好数据的一致性问题]]
